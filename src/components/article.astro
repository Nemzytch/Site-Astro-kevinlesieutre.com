---
interface Props {
    title: string;
    date: string;
    author: {
        name: string;
        avatar: string;
    };
    categories: string[];
    content: string;
}

const { title, date, author, categories, content } = Astro.props;
---

<main class="pt-24 pb-16 lg:pt-32 lg:pb-24 bg-white relative">
    <div class="flex justify-between px-4 mx-auto max-w-screen-xl">
        <!-- Sommaire sticky -->
        <aside class="hidden lg:block sticky top-8 h-fit w-64 mr-8" id="table-of-contents">
            <nav class="space-y-1">
                <h4 class="text-sm font-semibold text-gray-900 mb-4">Sommaire</h4>
                <!-- Le sommaire sera injecté ici par JavaScript -->
            </nav>
        </aside>

        <article class="mx-auto w-full max-w-2xl">
            <header class="mb-8">
                <!-- Catégories -->
                <div class="flex flex-wrap gap-2 mb-4">
                    {categories.map(category => (
                        <span class="px-3 py-1 text-xs font-medium bg-indigo-50 text-indigo-600 rounded-full">
                            {category}
                        </span>
                    ))}
                </div>

                <!-- Titre -->
                <h1 class="mb-4 text-4xl font-manrope font-bold leading-tight text-gray-900">
                    {title}
                </h1>

                <!-- Auteur et date -->
                <div class="flex items-center gap-4 mb-8">
                    <div class="flex items-center gap-3">
                        <img 
                            src={author.avatar}
                            alt={`Avatar de ${author.name}`}
                            class="rounded-full w-10 h-10 object-cover"
                        />
                        <span class="text-base font-normal text-gray-900">{author.name}</span>
                    </div>
                    <span class="text-base font-medium text-indigo-600">{date}</span>
                </div>
            </header>

            <!-- Contenu de l'article -->
            <div class="prose prose-lg max-w-none article-content [&_.wp-block-heading]:text-3xl [&_.wp-block-heading]:font-semibold [&_.wp-block-heading]:mt-16 [&_.wp-block-heading]:mb-8 [&_.wp-block-heading]:text-gray-900
                prose-headings:font-manrope
                prose-h1:text-4xl prose-h1:font-bold prose-h1:mb-8
                prose-h3:text-2xl prose-h3:font-medium prose-h3:mt-8 prose-h3:mb-4
                prose-p:text-gray-600 prose-p:leading-relaxed prose-p:mb-6
                prose-a:text-indigo-600 prose-a:no-underline hover:prose-a:underline
                prose-strong:text-gray-900 prose-strong:font-semibold
                prose-ul:my-6 prose-ul:list-disc prose-ul:pl-6
                prose-ol:my-6 prose-ol:list-decimal prose-ol:pl-6
                prose-li:text-gray-600 prose-li:mb-2
                prose-blockquote:border-l-4 prose-blockquote:border-indigo-500 prose-blockquote:pl-4 prose-blockquote:italic prose-blockquote:text-gray-700
                prose-img:rounded-xl prose-img:shadow-lg prose-img:my-8
                prose-code:text-indigo-600 prose-code:bg-indigo-50 prose-code:px-2 prose-code:py-0.5 prose-code:rounded
                prose-pre:bg-gray-900 prose-pre:text-gray-100 prose-pre:p-4 prose-pre:rounded-lg
            ">
                <Fragment set:html={content} />
            </div>
        </article>
    </div>
</main>

<slot name="recent-posts" />

<script>
    // Extraire les titres et générer le sommaire
    function generateTableOfContents() {
        const articleContent = document.querySelector('.article-content');
        const toc = document.querySelector('#table-of-contents nav');
        const headings = articleContent?.querySelectorAll('h2, h3, h4');
        
        if (!headings || !toc) return;

        headings.forEach((heading, index) => {
            const id = `heading-${index}`;
            heading.id = id;
            
            const level = parseInt(heading.tagName[1]);
            const link = document.createElement('a');
            link.href = `#${id}`;
            link.textContent = heading.textContent;
            link.className = `block py-2 text-sm hover:text-indigo-600 transition-colors ${
                level === 2 ? 'pl-0 text-gray-900' :
                level === 3 ? 'pl-4 text-gray-600' :
                'pl-8 text-gray-600'
            }`;
            
            toc.appendChild(link);
        });
    }

    // Surligner l'entrée active dans le sommaire
    function setupIntersectionObserver() {
        const observer = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    // Enlever la classe active de tous les liens
                    document.querySelectorAll('#table-of-contents nav a').forEach(link => {
                        link.classList.remove('text-indigo-600');
                    });
                    
                    // Ajouter la classe active au lien correspondant
                    const activeLink = document.querySelector(`#table-of-contents nav a[href="#${entry.target.id}"]`);
                    if (activeLink) {
                        activeLink.classList.add('text-indigo-600');
                    }
                }
            });
        }, {
            rootMargin: '-20% 0px -80% 0px'
        });

        // Observer tous les titres
        document.querySelectorAll('h2, h3, h4').forEach(heading => {
            observer.observe(heading);
        });
    }

    // Scroll doux vers les sections
    function setupSmoothScroll() {
        document.querySelectorAll('#table-of-contents nav a').forEach(link => {
            link.addEventListener('click', (e) => {
                e.preventDefault();
                const targetId = link.getAttribute('href')?.substring(1);
                const targetElement = document.getElementById(targetId || '');
                if (targetElement) {
                    targetElement.scrollIntoView({ behavior: 'smooth' });
                }
            });
        });
    }

    // Initialiser tout une fois que le DOM est chargé
    document.addEventListener('DOMContentLoaded', () => {
        generateTableOfContents();
        setupIntersectionObserver();
        setupSmoothScroll();
    });
</script>
